/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package webservice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-04-10")
public class GroupOfStudents {

  public interface Iface {

    public void add(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup) throws org.apache.thrift.TException;

    public void modify(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup) throws org.apache.thrift.TException;

    public void remove(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void add(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void modify(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void remove(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void add(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup) throws org.apache.thrift.TException
    {
      send_add(firstName, secondName, numberCourse, numberGroup);
      recv_add();
    }

    public void send_add(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup) throws org.apache.thrift.TException
    {
      add_args args = new add_args();
      args.setFirstName(firstName);
      args.setSecondName(secondName);
      args.setNumberCourse(numberCourse);
      args.setNumberGroup(numberGroup);
      sendBase("add", args);
    }

    public void recv_add() throws org.apache.thrift.TException
    {
      add_result result = new add_result();
      receiveBase(result, "add");
      return;
    }

    public void modify(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup) throws org.apache.thrift.TException
    {
      send_modify(firstName, secondName, numberCourse, numberGroup);
      recv_modify();
    }

    public void send_modify(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup) throws org.apache.thrift.TException
    {
      modify_args args = new modify_args();
      args.setFirstName(firstName);
      args.setSecondName(secondName);
      args.setNumberCourse(numberCourse);
      args.setNumberGroup(numberGroup);
      sendBase("modify", args);
    }

    public void recv_modify() throws org.apache.thrift.TException
    {
      modify_result result = new modify_result();
      receiveBase(result, "modify");
      return;
    }

    public void remove(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup) throws org.apache.thrift.TException
    {
      send_remove(firstName, secondName, numberCourse, numberGroup);
      recv_remove();
    }

    public void send_remove(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup) throws org.apache.thrift.TException
    {
      remove_args args = new remove_args();
      args.setFirstName(firstName);
      args.setSecondName(secondName);
      args.setNumberCourse(numberCourse);
      args.setNumberGroup(numberGroup);
      sendBase("remove", args);
    }

    public void recv_remove() throws org.apache.thrift.TException
    {
      remove_result result = new remove_result();
      receiveBase(result, "remove");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void add(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_call method_call = new add_call(firstName, secondName, numberCourse, numberGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String firstName;
      private java.lang.String secondName;
      private long numberCourse;
      private long numberGroup;
      public add_call(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstName = firstName;
        this.secondName = secondName;
        this.numberCourse = numberCourse;
        this.numberGroup = numberGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_args args = new add_args();
        args.setFirstName(firstName);
        args.setSecondName(secondName);
        args.setNumberCourse(numberCourse);
        args.setNumberGroup(numberGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void modify(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modify_call method_call = new modify_call(firstName, secondName, numberCourse, numberGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modify_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String firstName;
      private java.lang.String secondName;
      private long numberCourse;
      private long numberGroup;
      public modify_call(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstName = firstName;
        this.secondName = secondName;
        this.numberCourse = numberCourse;
        this.numberGroup = numberGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modify_args args = new modify_args();
        args.setFirstName(firstName);
        args.setSecondName(secondName);
        args.setNumberCourse(numberCourse);
        args.setNumberGroup(numberGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void remove(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remove_call method_call = new remove_call(firstName, secondName, numberCourse, numberGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class remove_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String firstName;
      private java.lang.String secondName;
      private long numberCourse;
      private long numberGroup;
      public remove_call(java.lang.String firstName, java.lang.String secondName, long numberCourse, long numberGroup, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstName = firstName;
        this.secondName = secondName;
        this.numberCourse = numberCourse;
        this.numberGroup = numberGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remove_args args = new remove_args();
        args.setFirstName(firstName);
        args.setSecondName(secondName);
        args.setNumberCourse(numberCourse);
        args.setNumberGroup(numberGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("add", new add());
      processMap.put("modify", new modify());
      processMap.put("remove", new remove());
      return processMap;
    }

    public static class add<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_args> {
      public add() {
        super("add");
      }

      public add_args getEmptyArgsInstance() {
        return new add_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public add_result getResult(I iface, add_args args) throws org.apache.thrift.TException {
        add_result result = new add_result();
        iface.add(args.firstName, args.secondName, args.numberCourse, args.numberGroup);
        return result;
      }
    }

    public static class modify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modify_args> {
      public modify() {
        super("modify");
      }

      public modify_args getEmptyArgsInstance() {
        return new modify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public modify_result getResult(I iface, modify_args args) throws org.apache.thrift.TException {
        modify_result result = new modify_result();
        iface.modify(args.firstName, args.secondName, args.numberCourse, args.numberGroup);
        return result;
      }
    }

    public static class remove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remove_args> {
      public remove() {
        super("remove");
      }

      public remove_args getEmptyArgsInstance() {
        return new remove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public remove_result getResult(I iface, remove_args args) throws org.apache.thrift.TException {
        remove_result result = new remove_result();
        iface.remove(args.firstName, args.secondName, args.numberCourse, args.numberGroup);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("add", new add());
      processMap.put("modify", new modify());
      processMap.put("remove", new remove());
      return processMap;
    }

    public static class add<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, add_args, Void> {
      public add() {
        super("add");
      }

      public add_args getEmptyArgsInstance() {
        return new add_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            add_result result = new add_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            add_result result = new add_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, add_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.add(args.firstName, args.secondName, args.numberCourse, args.numberGroup,resultHandler);
      }
    }

    public static class modify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modify_args, Void> {
      public modify() {
        super("modify");
      }

      public modify_args getEmptyArgsInstance() {
        return new modify_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            modify_result result = new modify_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            modify_result result = new modify_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modify_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.modify(args.firstName, args.secondName, args.numberCourse, args.numberGroup,resultHandler);
      }
    }

    public static class remove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, remove_args, Void> {
      public remove() {
        super("remove");
      }

      public remove_args getEmptyArgsInstance() {
        return new remove_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            remove_result result = new remove_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            remove_result result = new remove_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, remove_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.remove(args.firstName, args.secondName, args.numberCourse, args.numberGroup,resultHandler);
      }
    }

  }

  public static class add_args implements org.apache.thrift.TBase<add_args, add_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_args");

    private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECOND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("secondName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NUMBER_COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("numberCourse", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField NUMBER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("numberGroup", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new add_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new add_argsTupleSchemeFactory();

    public java.lang.String firstName; // required
    public java.lang.String secondName; // required
    public long numberCourse; // required
    public long numberGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_NAME((short)1, "firstName"),
      SECOND_NAME((short)2, "secondName"),
      NUMBER_COURSE((short)3, "numberCourse"),
      NUMBER_GROUP((short)4, "numberGroup");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_NAME
            return FIRST_NAME;
          case 2: // SECOND_NAME
            return SECOND_NAME;
          case 3: // NUMBER_COURSE
            return NUMBER_COURSE;
          case 4: // NUMBER_GROUP
            return NUMBER_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMBERCOURSE_ISSET_ID = 0;
    private static final int __NUMBERGROUP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECOND_NAME, new org.apache.thrift.meta_data.FieldMetaData("secondName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUMBER_COURSE, new org.apache.thrift.meta_data.FieldMetaData("numberCourse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("numberGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_args.class, metaDataMap);
    }

    public add_args() {
    }

    public add_args(
      java.lang.String firstName,
      java.lang.String secondName,
      long numberCourse,
      long numberGroup)
    {
      this();
      this.firstName = firstName;
      this.secondName = secondName;
      this.numberCourse = numberCourse;
      setNumberCourseIsSet(true);
      this.numberGroup = numberGroup;
      setNumberGroupIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_args(add_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFirstName()) {
        this.firstName = other.firstName;
      }
      if (other.isSetSecondName()) {
        this.secondName = other.secondName;
      }
      this.numberCourse = other.numberCourse;
      this.numberGroup = other.numberGroup;
    }

    public add_args deepCopy() {
      return new add_args(this);
    }

    @Override
    public void clear() {
      this.firstName = null;
      this.secondName = null;
      setNumberCourseIsSet(false);
      this.numberCourse = 0;
      setNumberGroupIsSet(false);
      this.numberGroup = 0;
    }

    public java.lang.String getFirstName() {
      return this.firstName;
    }

    public add_args setFirstName(java.lang.String firstName) {
      this.firstName = firstName;
      return this;
    }

    public void unsetFirstName() {
      this.firstName = null;
    }

    /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstName() {
      return this.firstName != null;
    }

    public void setFirstNameIsSet(boolean value) {
      if (!value) {
        this.firstName = null;
      }
    }

    public java.lang.String getSecondName() {
      return this.secondName;
    }

    public add_args setSecondName(java.lang.String secondName) {
      this.secondName = secondName;
      return this;
    }

    public void unsetSecondName() {
      this.secondName = null;
    }

    /** Returns true if field secondName is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondName() {
      return this.secondName != null;
    }

    public void setSecondNameIsSet(boolean value) {
      if (!value) {
        this.secondName = null;
      }
    }

    public long getNumberCourse() {
      return this.numberCourse;
    }

    public add_args setNumberCourse(long numberCourse) {
      this.numberCourse = numberCourse;
      setNumberCourseIsSet(true);
      return this;
    }

    public void unsetNumberCourse() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBERCOURSE_ISSET_ID);
    }

    /** Returns true if field numberCourse is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberCourse() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBERCOURSE_ISSET_ID);
    }

    public void setNumberCourseIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBERCOURSE_ISSET_ID, value);
    }

    public long getNumberGroup() {
      return this.numberGroup;
    }

    public add_args setNumberGroup(long numberGroup) {
      this.numberGroup = numberGroup;
      setNumberGroupIsSet(true);
      return this;
    }

    public void unsetNumberGroup() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBERGROUP_ISSET_ID);
    }

    /** Returns true if field numberGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberGroup() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBERGROUP_ISSET_ID);
    }

    public void setNumberGroupIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBERGROUP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FIRST_NAME:
        if (value == null) {
          unsetFirstName();
        } else {
          setFirstName((java.lang.String)value);
        }
        break;

      case SECOND_NAME:
        if (value == null) {
          unsetSecondName();
        } else {
          setSecondName((java.lang.String)value);
        }
        break;

      case NUMBER_COURSE:
        if (value == null) {
          unsetNumberCourse();
        } else {
          setNumberCourse((java.lang.Long)value);
        }
        break;

      case NUMBER_GROUP:
        if (value == null) {
          unsetNumberGroup();
        } else {
          setNumberGroup((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_NAME:
        return getFirstName();

      case SECOND_NAME:
        return getSecondName();

      case NUMBER_COURSE:
        return getNumberCourse();

      case NUMBER_GROUP:
        return getNumberGroup();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRST_NAME:
        return isSetFirstName();
      case SECOND_NAME:
        return isSetSecondName();
      case NUMBER_COURSE:
        return isSetNumberCourse();
      case NUMBER_GROUP:
        return isSetNumberGroup();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof add_args)
        return this.equals((add_args)that);
      return false;
    }

    public boolean equals(add_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstName = true && this.isSetFirstName();
      boolean that_present_firstName = true && that.isSetFirstName();
      if (this_present_firstName || that_present_firstName) {
        if (!(this_present_firstName && that_present_firstName))
          return false;
        if (!this.firstName.equals(that.firstName))
          return false;
      }

      boolean this_present_secondName = true && this.isSetSecondName();
      boolean that_present_secondName = true && that.isSetSecondName();
      if (this_present_secondName || that_present_secondName) {
        if (!(this_present_secondName && that_present_secondName))
          return false;
        if (!this.secondName.equals(that.secondName))
          return false;
      }

      boolean this_present_numberCourse = true;
      boolean that_present_numberCourse = true;
      if (this_present_numberCourse || that_present_numberCourse) {
        if (!(this_present_numberCourse && that_present_numberCourse))
          return false;
        if (this.numberCourse != that.numberCourse)
          return false;
      }

      boolean this_present_numberGroup = true;
      boolean that_present_numberGroup = true;
      if (this_present_numberGroup || that_present_numberGroup) {
        if (!(this_present_numberGroup && that_present_numberGroup))
          return false;
        if (this.numberGroup != that.numberGroup)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFirstName()) ? 131071 : 524287);
      if (isSetFirstName())
        hashCode = hashCode * 8191 + firstName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSecondName()) ? 131071 : 524287);
      if (isSetSecondName())
        hashCode = hashCode * 8191 + secondName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numberCourse);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numberGroup);

      return hashCode;
    }

    @Override
    public int compareTo(add_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondName()).compareTo(other.isSetSecondName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondName, other.secondName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumberCourse()).compareTo(other.isSetNumberCourse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberCourse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberCourse, other.numberCourse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumberGroup()).compareTo(other.isSetNumberGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberGroup, other.numberGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("add_args(");
      boolean first = true;

      sb.append("firstName:");
      if (this.firstName == null) {
        sb.append("null");
      } else {
        sb.append(this.firstName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondName:");
      if (this.secondName == null) {
        sb.append("null");
      } else {
        sb.append(this.secondName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberCourse:");
      sb.append(this.numberCourse);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberGroup:");
      sb.append(this.numberGroup);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public add_argsStandardScheme getScheme() {
        return new add_argsStandardScheme();
      }
    }

    private static class add_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<add_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstName = iprot.readString();
                struct.setFirstNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECOND_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secondName = iprot.readString();
                struct.setSecondNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUMBER_COURSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numberCourse = iprot.readI64();
                struct.setNumberCourseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUMBER_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numberGroup = iprot.readI64();
                struct.setNumberGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.firstName != null) {
          oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
          oprot.writeString(struct.firstName);
          oprot.writeFieldEnd();
        }
        if (struct.secondName != null) {
          oprot.writeFieldBegin(SECOND_NAME_FIELD_DESC);
          oprot.writeString(struct.secondName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUMBER_COURSE_FIELD_DESC);
        oprot.writeI64(struct.numberCourse);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_GROUP_FIELD_DESC);
        oprot.writeI64(struct.numberGroup);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public add_argsTupleScheme getScheme() {
        return new add_argsTupleScheme();
      }
    }

    private static class add_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<add_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstName()) {
          optionals.set(0);
        }
        if (struct.isSetSecondName()) {
          optionals.set(1);
        }
        if (struct.isSetNumberCourse()) {
          optionals.set(2);
        }
        if (struct.isSetNumberGroup()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFirstName()) {
          oprot.writeString(struct.firstName);
        }
        if (struct.isSetSecondName()) {
          oprot.writeString(struct.secondName);
        }
        if (struct.isSetNumberCourse()) {
          oprot.writeI64(struct.numberCourse);
        }
        if (struct.isSetNumberGroup()) {
          oprot.writeI64(struct.numberGroup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.firstName = iprot.readString();
          struct.setFirstNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secondName = iprot.readString();
          struct.setSecondNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numberCourse = iprot.readI64();
          struct.setNumberCourseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numberGroup = iprot.readI64();
          struct.setNumberGroupIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class add_result implements org.apache.thrift.TBase<add_result, add_result._Fields>, java.io.Serializable, Cloneable, Comparable<add_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new add_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new add_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_result.class, metaDataMap);
    }

    public add_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_result(add_result other) {
    }

    public add_result deepCopy() {
      return new add_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof add_result)
        return this.equals((add_result)that);
      return false;
    }

    public boolean equals(add_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(add_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("add_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public add_resultStandardScheme getScheme() {
        return new add_resultStandardScheme();
      }
    }

    private static class add_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<add_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public add_resultTupleScheme getScheme() {
        return new add_resultTupleScheme();
      }
    }

    private static class add_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<add_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modify_args implements org.apache.thrift.TBase<modify_args, modify_args._Fields>, java.io.Serializable, Cloneable, Comparable<modify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modify_args");

    private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECOND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("secondName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NUMBER_COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("numberCourse", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField NUMBER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("numberGroup", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modify_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modify_argsTupleSchemeFactory();

    public java.lang.String firstName; // required
    public java.lang.String secondName; // required
    public long numberCourse; // required
    public long numberGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_NAME((short)1, "firstName"),
      SECOND_NAME((short)2, "secondName"),
      NUMBER_COURSE((short)3, "numberCourse"),
      NUMBER_GROUP((short)4, "numberGroup");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_NAME
            return FIRST_NAME;
          case 2: // SECOND_NAME
            return SECOND_NAME;
          case 3: // NUMBER_COURSE
            return NUMBER_COURSE;
          case 4: // NUMBER_GROUP
            return NUMBER_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMBERCOURSE_ISSET_ID = 0;
    private static final int __NUMBERGROUP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECOND_NAME, new org.apache.thrift.meta_data.FieldMetaData("secondName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUMBER_COURSE, new org.apache.thrift.meta_data.FieldMetaData("numberCourse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("numberGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modify_args.class, metaDataMap);
    }

    public modify_args() {
    }

    public modify_args(
      java.lang.String firstName,
      java.lang.String secondName,
      long numberCourse,
      long numberGroup)
    {
      this();
      this.firstName = firstName;
      this.secondName = secondName;
      this.numberCourse = numberCourse;
      setNumberCourseIsSet(true);
      this.numberGroup = numberGroup;
      setNumberGroupIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modify_args(modify_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFirstName()) {
        this.firstName = other.firstName;
      }
      if (other.isSetSecondName()) {
        this.secondName = other.secondName;
      }
      this.numberCourse = other.numberCourse;
      this.numberGroup = other.numberGroup;
    }

    public modify_args deepCopy() {
      return new modify_args(this);
    }

    @Override
    public void clear() {
      this.firstName = null;
      this.secondName = null;
      setNumberCourseIsSet(false);
      this.numberCourse = 0;
      setNumberGroupIsSet(false);
      this.numberGroup = 0;
    }

    public java.lang.String getFirstName() {
      return this.firstName;
    }

    public modify_args setFirstName(java.lang.String firstName) {
      this.firstName = firstName;
      return this;
    }

    public void unsetFirstName() {
      this.firstName = null;
    }

    /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstName() {
      return this.firstName != null;
    }

    public void setFirstNameIsSet(boolean value) {
      if (!value) {
        this.firstName = null;
      }
    }

    public java.lang.String getSecondName() {
      return this.secondName;
    }

    public modify_args setSecondName(java.lang.String secondName) {
      this.secondName = secondName;
      return this;
    }

    public void unsetSecondName() {
      this.secondName = null;
    }

    /** Returns true if field secondName is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondName() {
      return this.secondName != null;
    }

    public void setSecondNameIsSet(boolean value) {
      if (!value) {
        this.secondName = null;
      }
    }

    public long getNumberCourse() {
      return this.numberCourse;
    }

    public modify_args setNumberCourse(long numberCourse) {
      this.numberCourse = numberCourse;
      setNumberCourseIsSet(true);
      return this;
    }

    public void unsetNumberCourse() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBERCOURSE_ISSET_ID);
    }

    /** Returns true if field numberCourse is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberCourse() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBERCOURSE_ISSET_ID);
    }

    public void setNumberCourseIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBERCOURSE_ISSET_ID, value);
    }

    public long getNumberGroup() {
      return this.numberGroup;
    }

    public modify_args setNumberGroup(long numberGroup) {
      this.numberGroup = numberGroup;
      setNumberGroupIsSet(true);
      return this;
    }

    public void unsetNumberGroup() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBERGROUP_ISSET_ID);
    }

    /** Returns true if field numberGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberGroup() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBERGROUP_ISSET_ID);
    }

    public void setNumberGroupIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBERGROUP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FIRST_NAME:
        if (value == null) {
          unsetFirstName();
        } else {
          setFirstName((java.lang.String)value);
        }
        break;

      case SECOND_NAME:
        if (value == null) {
          unsetSecondName();
        } else {
          setSecondName((java.lang.String)value);
        }
        break;

      case NUMBER_COURSE:
        if (value == null) {
          unsetNumberCourse();
        } else {
          setNumberCourse((java.lang.Long)value);
        }
        break;

      case NUMBER_GROUP:
        if (value == null) {
          unsetNumberGroup();
        } else {
          setNumberGroup((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_NAME:
        return getFirstName();

      case SECOND_NAME:
        return getSecondName();

      case NUMBER_COURSE:
        return getNumberCourse();

      case NUMBER_GROUP:
        return getNumberGroup();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRST_NAME:
        return isSetFirstName();
      case SECOND_NAME:
        return isSetSecondName();
      case NUMBER_COURSE:
        return isSetNumberCourse();
      case NUMBER_GROUP:
        return isSetNumberGroup();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof modify_args)
        return this.equals((modify_args)that);
      return false;
    }

    public boolean equals(modify_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstName = true && this.isSetFirstName();
      boolean that_present_firstName = true && that.isSetFirstName();
      if (this_present_firstName || that_present_firstName) {
        if (!(this_present_firstName && that_present_firstName))
          return false;
        if (!this.firstName.equals(that.firstName))
          return false;
      }

      boolean this_present_secondName = true && this.isSetSecondName();
      boolean that_present_secondName = true && that.isSetSecondName();
      if (this_present_secondName || that_present_secondName) {
        if (!(this_present_secondName && that_present_secondName))
          return false;
        if (!this.secondName.equals(that.secondName))
          return false;
      }

      boolean this_present_numberCourse = true;
      boolean that_present_numberCourse = true;
      if (this_present_numberCourse || that_present_numberCourse) {
        if (!(this_present_numberCourse && that_present_numberCourse))
          return false;
        if (this.numberCourse != that.numberCourse)
          return false;
      }

      boolean this_present_numberGroup = true;
      boolean that_present_numberGroup = true;
      if (this_present_numberGroup || that_present_numberGroup) {
        if (!(this_present_numberGroup && that_present_numberGroup))
          return false;
        if (this.numberGroup != that.numberGroup)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFirstName()) ? 131071 : 524287);
      if (isSetFirstName())
        hashCode = hashCode * 8191 + firstName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSecondName()) ? 131071 : 524287);
      if (isSetSecondName())
        hashCode = hashCode * 8191 + secondName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numberCourse);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numberGroup);

      return hashCode;
    }

    @Override
    public int compareTo(modify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondName()).compareTo(other.isSetSecondName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondName, other.secondName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumberCourse()).compareTo(other.isSetNumberCourse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberCourse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberCourse, other.numberCourse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumberGroup()).compareTo(other.isSetNumberGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberGroup, other.numberGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modify_args(");
      boolean first = true;

      sb.append("firstName:");
      if (this.firstName == null) {
        sb.append("null");
      } else {
        sb.append(this.firstName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondName:");
      if (this.secondName == null) {
        sb.append("null");
      } else {
        sb.append(this.secondName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberCourse:");
      sb.append(this.numberCourse);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberGroup:");
      sb.append(this.numberGroup);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modify_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modify_argsStandardScheme getScheme() {
        return new modify_argsStandardScheme();
      }
    }

    private static class modify_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<modify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstName = iprot.readString();
                struct.setFirstNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECOND_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secondName = iprot.readString();
                struct.setSecondNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUMBER_COURSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numberCourse = iprot.readI64();
                struct.setNumberCourseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUMBER_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numberGroup = iprot.readI64();
                struct.setNumberGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.firstName != null) {
          oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
          oprot.writeString(struct.firstName);
          oprot.writeFieldEnd();
        }
        if (struct.secondName != null) {
          oprot.writeFieldBegin(SECOND_NAME_FIELD_DESC);
          oprot.writeString(struct.secondName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUMBER_COURSE_FIELD_DESC);
        oprot.writeI64(struct.numberCourse);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_GROUP_FIELD_DESC);
        oprot.writeI64(struct.numberGroup);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modify_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modify_argsTupleScheme getScheme() {
        return new modify_argsTupleScheme();
      }
    }

    private static class modify_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<modify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstName()) {
          optionals.set(0);
        }
        if (struct.isSetSecondName()) {
          optionals.set(1);
        }
        if (struct.isSetNumberCourse()) {
          optionals.set(2);
        }
        if (struct.isSetNumberGroup()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFirstName()) {
          oprot.writeString(struct.firstName);
        }
        if (struct.isSetSecondName()) {
          oprot.writeString(struct.secondName);
        }
        if (struct.isSetNumberCourse()) {
          oprot.writeI64(struct.numberCourse);
        }
        if (struct.isSetNumberGroup()) {
          oprot.writeI64(struct.numberGroup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.firstName = iprot.readString();
          struct.setFirstNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secondName = iprot.readString();
          struct.setSecondNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numberCourse = iprot.readI64();
          struct.setNumberCourseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numberGroup = iprot.readI64();
          struct.setNumberGroupIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modify_result implements org.apache.thrift.TBase<modify_result, modify_result._Fields>, java.io.Serializable, Cloneable, Comparable<modify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modify_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modify_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modify_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modify_result.class, metaDataMap);
    }

    public modify_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modify_result(modify_result other) {
    }

    public modify_result deepCopy() {
      return new modify_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof modify_result)
        return this.equals((modify_result)that);
      return false;
    }

    public boolean equals(modify_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(modify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modify_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modify_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modify_resultStandardScheme getScheme() {
        return new modify_resultStandardScheme();
      }
    }

    private static class modify_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<modify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modify_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modify_resultTupleScheme getScheme() {
        return new modify_resultTupleScheme();
      }
    }

    private static class modify_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<modify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class remove_args implements org.apache.thrift.TBase<remove_args, remove_args._Fields>, java.io.Serializable, Cloneable, Comparable<remove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_args");

    private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECOND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("secondName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NUMBER_COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("numberCourse", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField NUMBER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("numberGroup", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new remove_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new remove_argsTupleSchemeFactory();

    public java.lang.String firstName; // required
    public java.lang.String secondName; // required
    public long numberCourse; // required
    public long numberGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_NAME((short)1, "firstName"),
      SECOND_NAME((short)2, "secondName"),
      NUMBER_COURSE((short)3, "numberCourse"),
      NUMBER_GROUP((short)4, "numberGroup");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_NAME
            return FIRST_NAME;
          case 2: // SECOND_NAME
            return SECOND_NAME;
          case 3: // NUMBER_COURSE
            return NUMBER_COURSE;
          case 4: // NUMBER_GROUP
            return NUMBER_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMBERCOURSE_ISSET_ID = 0;
    private static final int __NUMBERGROUP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECOND_NAME, new org.apache.thrift.meta_data.FieldMetaData("secondName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUMBER_COURSE, new org.apache.thrift.meta_data.FieldMetaData("numberCourse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("numberGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_args.class, metaDataMap);
    }

    public remove_args() {
    }

    public remove_args(
      java.lang.String firstName,
      java.lang.String secondName,
      long numberCourse,
      long numberGroup)
    {
      this();
      this.firstName = firstName;
      this.secondName = secondName;
      this.numberCourse = numberCourse;
      setNumberCourseIsSet(true);
      this.numberGroup = numberGroup;
      setNumberGroupIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_args(remove_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFirstName()) {
        this.firstName = other.firstName;
      }
      if (other.isSetSecondName()) {
        this.secondName = other.secondName;
      }
      this.numberCourse = other.numberCourse;
      this.numberGroup = other.numberGroup;
    }

    public remove_args deepCopy() {
      return new remove_args(this);
    }

    @Override
    public void clear() {
      this.firstName = null;
      this.secondName = null;
      setNumberCourseIsSet(false);
      this.numberCourse = 0;
      setNumberGroupIsSet(false);
      this.numberGroup = 0;
    }

    public java.lang.String getFirstName() {
      return this.firstName;
    }

    public remove_args setFirstName(java.lang.String firstName) {
      this.firstName = firstName;
      return this;
    }

    public void unsetFirstName() {
      this.firstName = null;
    }

    /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstName() {
      return this.firstName != null;
    }

    public void setFirstNameIsSet(boolean value) {
      if (!value) {
        this.firstName = null;
      }
    }

    public java.lang.String getSecondName() {
      return this.secondName;
    }

    public remove_args setSecondName(java.lang.String secondName) {
      this.secondName = secondName;
      return this;
    }

    public void unsetSecondName() {
      this.secondName = null;
    }

    /** Returns true if field secondName is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondName() {
      return this.secondName != null;
    }

    public void setSecondNameIsSet(boolean value) {
      if (!value) {
        this.secondName = null;
      }
    }

    public long getNumberCourse() {
      return this.numberCourse;
    }

    public remove_args setNumberCourse(long numberCourse) {
      this.numberCourse = numberCourse;
      setNumberCourseIsSet(true);
      return this;
    }

    public void unsetNumberCourse() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBERCOURSE_ISSET_ID);
    }

    /** Returns true if field numberCourse is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberCourse() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBERCOURSE_ISSET_ID);
    }

    public void setNumberCourseIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBERCOURSE_ISSET_ID, value);
    }

    public long getNumberGroup() {
      return this.numberGroup;
    }

    public remove_args setNumberGroup(long numberGroup) {
      this.numberGroup = numberGroup;
      setNumberGroupIsSet(true);
      return this;
    }

    public void unsetNumberGroup() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBERGROUP_ISSET_ID);
    }

    /** Returns true if field numberGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberGroup() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBERGROUP_ISSET_ID);
    }

    public void setNumberGroupIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBERGROUP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FIRST_NAME:
        if (value == null) {
          unsetFirstName();
        } else {
          setFirstName((java.lang.String)value);
        }
        break;

      case SECOND_NAME:
        if (value == null) {
          unsetSecondName();
        } else {
          setSecondName((java.lang.String)value);
        }
        break;

      case NUMBER_COURSE:
        if (value == null) {
          unsetNumberCourse();
        } else {
          setNumberCourse((java.lang.Long)value);
        }
        break;

      case NUMBER_GROUP:
        if (value == null) {
          unsetNumberGroup();
        } else {
          setNumberGroup((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_NAME:
        return getFirstName();

      case SECOND_NAME:
        return getSecondName();

      case NUMBER_COURSE:
        return getNumberCourse();

      case NUMBER_GROUP:
        return getNumberGroup();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRST_NAME:
        return isSetFirstName();
      case SECOND_NAME:
        return isSetSecondName();
      case NUMBER_COURSE:
        return isSetNumberCourse();
      case NUMBER_GROUP:
        return isSetNumberGroup();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_args)
        return this.equals((remove_args)that);
      return false;
    }

    public boolean equals(remove_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstName = true && this.isSetFirstName();
      boolean that_present_firstName = true && that.isSetFirstName();
      if (this_present_firstName || that_present_firstName) {
        if (!(this_present_firstName && that_present_firstName))
          return false;
        if (!this.firstName.equals(that.firstName))
          return false;
      }

      boolean this_present_secondName = true && this.isSetSecondName();
      boolean that_present_secondName = true && that.isSetSecondName();
      if (this_present_secondName || that_present_secondName) {
        if (!(this_present_secondName && that_present_secondName))
          return false;
        if (!this.secondName.equals(that.secondName))
          return false;
      }

      boolean this_present_numberCourse = true;
      boolean that_present_numberCourse = true;
      if (this_present_numberCourse || that_present_numberCourse) {
        if (!(this_present_numberCourse && that_present_numberCourse))
          return false;
        if (this.numberCourse != that.numberCourse)
          return false;
      }

      boolean this_present_numberGroup = true;
      boolean that_present_numberGroup = true;
      if (this_present_numberGroup || that_present_numberGroup) {
        if (!(this_present_numberGroup && that_present_numberGroup))
          return false;
        if (this.numberGroup != that.numberGroup)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFirstName()) ? 131071 : 524287);
      if (isSetFirstName())
        hashCode = hashCode * 8191 + firstName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSecondName()) ? 131071 : 524287);
      if (isSetSecondName())
        hashCode = hashCode * 8191 + secondName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numberCourse);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numberGroup);

      return hashCode;
    }

    @Override
    public int compareTo(remove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondName()).compareTo(other.isSetSecondName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondName, other.secondName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumberCourse()).compareTo(other.isSetNumberCourse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberCourse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberCourse, other.numberCourse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumberGroup()).compareTo(other.isSetNumberGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberGroup, other.numberGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("remove_args(");
      boolean first = true;

      sb.append("firstName:");
      if (this.firstName == null) {
        sb.append("null");
      } else {
        sb.append(this.firstName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondName:");
      if (this.secondName == null) {
        sb.append("null");
      } else {
        sb.append(this.secondName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberCourse:");
      sb.append(this.numberCourse);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberGroup:");
      sb.append(this.numberGroup);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public remove_argsStandardScheme getScheme() {
        return new remove_argsStandardScheme();
      }
    }

    private static class remove_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<remove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstName = iprot.readString();
                struct.setFirstNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECOND_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secondName = iprot.readString();
                struct.setSecondNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUMBER_COURSE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numberCourse = iprot.readI64();
                struct.setNumberCourseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUMBER_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numberGroup = iprot.readI64();
                struct.setNumberGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.firstName != null) {
          oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
          oprot.writeString(struct.firstName);
          oprot.writeFieldEnd();
        }
        if (struct.secondName != null) {
          oprot.writeFieldBegin(SECOND_NAME_FIELD_DESC);
          oprot.writeString(struct.secondName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUMBER_COURSE_FIELD_DESC);
        oprot.writeI64(struct.numberCourse);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_GROUP_FIELD_DESC);
        oprot.writeI64(struct.numberGroup);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public remove_argsTupleScheme getScheme() {
        return new remove_argsTupleScheme();
      }
    }

    private static class remove_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<remove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstName()) {
          optionals.set(0);
        }
        if (struct.isSetSecondName()) {
          optionals.set(1);
        }
        if (struct.isSetNumberCourse()) {
          optionals.set(2);
        }
        if (struct.isSetNumberGroup()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFirstName()) {
          oprot.writeString(struct.firstName);
        }
        if (struct.isSetSecondName()) {
          oprot.writeString(struct.secondName);
        }
        if (struct.isSetNumberCourse()) {
          oprot.writeI64(struct.numberCourse);
        }
        if (struct.isSetNumberGroup()) {
          oprot.writeI64(struct.numberGroup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.firstName = iprot.readString();
          struct.setFirstNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secondName = iprot.readString();
          struct.setSecondNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numberCourse = iprot.readI64();
          struct.setNumberCourseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numberGroup = iprot.readI64();
          struct.setNumberGroupIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class remove_result implements org.apache.thrift.TBase<remove_result, remove_result._Fields>, java.io.Serializable, Cloneable, Comparable<remove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new remove_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new remove_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_result.class, metaDataMap);
    }

    public remove_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_result(remove_result other) {
    }

    public remove_result deepCopy() {
      return new remove_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_result)
        return this.equals((remove_result)that);
      return false;
    }

    public boolean equals(remove_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(remove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("remove_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public remove_resultStandardScheme getScheme() {
        return new remove_resultStandardScheme();
      }
    }

    private static class remove_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<remove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public remove_resultTupleScheme getScheme() {
        return new remove_resultTupleScheme();
      }
    }

    private static class remove_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<remove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
